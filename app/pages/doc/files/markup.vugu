<div>

    <p>
        The Markup section is an element which has the HTML that is displayed for this file (each file is a "component",
        following the parlance of other UI libraries).
      </p>

      <p>In addition to regular HTML, some specific attributes have special meaning in Vugu and allow you to introduce 
        logic into your component's display.
      </p>

      <div class="alert alert-warning" role="alert">
        <i class="icon-alert-circle"></i>
        <h4 class="fs-22">Tip</h4>
        <p>Component files are parsed first using a regular HTML parser, before any Go expressions are considered.
          As such, using single quotes when writing attribute values can help with HTML escaping issues.  
          For example, you can write <code>&lt;div vg-if='myvar == "myval"'></code> or
          <code>&lt;div vg-if="myvar == &amp;#34;myval&amp;#34;"></code>, but the former is easier to read. </p>
      </div>

      <p>Note that HTML namespaces like <code>svg</code> and <code>math</code> should work as expected.</p>

      <h3 id="vg-if">Conditionals with <code>vg-if</code></h3>

      <p>
        You can choose a condition for an element to be displayed using <code>vg-if='condition'</code>. The 
        condition is regular Go code and during code generation is put directly between <nobr><code>if</code> and <code>{</code></nobr>
        in the resulting .go file.  While the expression itself can be any valid Go code for an if statement,
        a common case is to reference a member variable of your 
        <a href="/doc/components">Component</a> struct.
        For example:
      </p>
<div vg-html='codefmt.Show("html",`<div>
    <p vg-if=&apos;c.ShowText&apos;>
        Conditional text here.
    </p>
</div>

<script type="application/x-go">
type Root struct { // component for "root"
    ShowText bool `+"`"+`vugu:"data"`+"`"+`
}
</script>`)'></div>

      <p>Note the use of <code>c</code> as the name of the method receiver (i.e. <code>c</code> is "the component I am in").</p>

      <h3 id="vg-for">Loops with <code>vg-for</code></h3>

      <p>Loops correspond directly to <code>for</code> blocks in Go code.  All forms of loops are supported
        including the <code>init; condition; post</code> syntax as well as <code>range</code> expressions.
        For example:
      </p>

<div vg-content='codefmt.Show("html",`<div>
    <p vg-for=&apos;i := 0; i < 10; i++&apos;>
        <div vg-content="i"></div>
    </p>
</div>`)'></div>

<div vg-content='codefmt.Show("html",`<div>
    <p vg-for=&apos;_, item := range c.Items&apos;>
        <div vg-content="item"></div>
    </p>
</div>

<script type="application/x-go">
type Root struct {
    Items []string `+"`"+`vugu:"data"`+"`"+`
}
</script>`)'></div>

      <p>Note that the vg-content attribute outputs the value as HTML inside the element. See below.</p>

      <p>
        As a special case and for convenience, if the expression contains no whitespace it will be expanded to
        <code>for key, value := range expr {</code>. Example:
      </p>

<div vg-html='codefmt.Show("html",`<div>
    <div vg-for=&apos;c.Items&apos;>
        <div>
            Key: <span vg-content="key"></span>
            Value: <span vg-content="value"></span>
        </div>
    </div>
</div>

<script type="application/x-go">
type Root struct {
    Items []string `+"`"+`vugu:"data"`+"`"+`
}
</script>`)'></div>

      <p>By default, loop variables are shadowed (redeclared with the same name) inside the loop.
        This is done for convenience as the common case is you want references to these variables 
        to not change if used inside DOM event handlers or other code.  To disable loop variable shadowing,
        you can use <code>vg-for.noshadow</code> instead of <code>vg-for</code>.
      </p>

      <p>
        When <code>vg-for</code> is used in conjuction with <a href="/doc/components">nested components</a>,
        a <code>vg-key</code> attribute can be used to determine which components to re-use across render cycles.
        When vg-key appears on a vg-for it specifies the default expression for component references inside the loop.
        This can then be overridden on individual component references as needed.
      </p>

      <h3 id="vg-html">HTML content with <code id="vg-content">vg-content</code></h3>

      <p>The vg-content attribute is used to output an expression to the contents of an element.
        It corresponds to the <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML">innerHTML</a> property.
        The attribute vg-html is a synonym for vg-content and has the exact same behavior.
      </p>
      <p>

        The expression you provided is converted to a string and represented as HTML according to the rules described in 
        <a href="https://godoc.org/github.com/vugu/vugu#VGNode.SetInnerHTML" target="_blank">SetInnerHTML</a>.
        Generally speaking, the value will be converted to text and HTML escaped (both for security against
        XSS attacks, and for convenience).  If you wish to override the HTML escaping and provide raw unescaped
        HTML, you need only provide a value that implements the 
        <a href="https://godoc.org/github.com/vugu/vugu#HTMLer" target="_blank">HTMLer</a>
        interface.  This is easily done by casting to <code>vugu.HTML</code>.

        <!-- The expression is converted to a string using  -->
        <!-- <a target="_blank" href="https://golang.org/pkg/fmt/#Sprint">fmt.Sprint()</a>.  Example: -->
      </p>

<div vg-content='codefmt.Show("html",`<div>
    <p vg-content=&apos;"this content <will be> escaped"&apos;>
    <p vg-content=&apos;vugu.HTML("this will output directly as <em>raw HTML</em>, no escaping")&apos;>
    <p vg-content=&apos;123&apos;> &lt;!-- number will be output according to fmt.Sprintf %v rules -->
</div>
`)'></div>

      <p>
          You may use variable names declared in earlier constructs (such as <code>key</code> or <code>value</code> from a for/range loop).
          Regular Go variable scoping rules apply, where each nested DOM element is equivalent to a Go <code>{</code> code block <code>}</code>.
        </p>

      <h3 id="dynamic-attributes">Dynamic Attributes with <code>:</code> and <code>vg-attr</code></h3>

      <p>
        The values of HTML attributes can be made dynamic and accept Go expressions.  
        Dynamically changing attribute values has many uses such as applying CSS styles with the class attribute.
      </p>

<div vg-html='codefmt.Show("html",`<div>
    <p :style=&apos;"background:"+c.BgColor&apos;></p>
</div>

<script type="application/x-go">
type Root struct {
    BgColor string // e.g. "blue"
}
</script>`)'></div>

<p>Note that in addition to the above use, dynamic attributes are frequently used in conjuction with 
  components, where attributes that start with an uppercase letter become struct field assignments.
  In this case, the attributes are not converted to strings but are kept as regular Go expressions emitted directly
  into the generated code.  See the 
  <a href="/doc/components">Components</a> page for more info.
</p>

<p>For HTML elements (as opposed to components), the following rules apply to dynamic attribute values:</p>

<ul>
  <li><strong>string</strong> values are placed as-is into the attribute's value</li>
  <li><strong>numbers</strong> (built-in types beginning with <code>int</code>, <code>uint</code>, <code>float</code>) 
    are converted to a string using the applicable function in <a target="_blank" href="https://golang.org/pkg/strconv/">strconv</a></li>
  <li><strong>bool</strong> values that are true result in the attribute being included in the output, false will omit the attribute 
    (e.g. <code>&lt;video :autoplay='someBool'></code>)</li>
  <li><strong>pointers</strong> which are not nil are followed and the rule for the type pointed to applied</li>
  <li><strong>nil</strong> pointer or interface values result in omitting the attribute from the output</li>
  <li><strong>fmt.Stringer</strong> values (with a <code>String() string</code> method) which are not nil are converted to a string by calling that method</li>
  <li>Any other possible value does not have well-defined behavior and should be avoided.  The current implementation will
    convert to a string per the <code>fmt</code> package.
  </li>
  <li>The above is implemented by <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#VGNode.AddAttrInterface">AddAttrInterface</a></li>
</ul>

<p>You can also provide a value which implements 
  <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#VGAttributeLister">VGAttributeLister</a> and specify that 
it should be called with <code>vg-attr=</code>.  Example:</p>

<!--
<div vg-html='codefmt.Show("html",`<div>
  <p vg-attr=&apos;vugu.VGAttributeListerFunc(func() (ret []vugu.VGAttribute) {
    ret = append(ret, vugu.VGAttribute{
      Key:"style",
      Val:"background:"+c.BgColor,
    })
    return
  })&apos;></p>
</div>
-->

<div vg-html='codefmt.Show("html",`<div>
  <p vg-attr=&apos;vugu.VGAttributeListerFunc(c.makeAttrs)&apos;></p>
</div>

<script type="application/x-go">
type Root struct {
  BgColor string // e.g. "blue"
}
func (c *Root) makeAttrs() (ret []vugu.VGAttribute) {
  ret = append(ret, vugu.VGAttribute{
    Key:"style",
    Val:"background:"+c.BgColor,
  })
  return
}
</script>`)'></div>

<p><code>:=</code> is shorthand for <code>vg-attr</code>, e.g. <code>&lt;p :=&apos;vugu.VGAttributeListerFunc(c.makeAttrs)&apos;></code>
is also valid with the same behavior.</p>

      <h3 id="vg-template">Template Elements with <code>&lt;vg-template></code></h3>

      <p>In some situations it is useful to attach a condition or a loop to to an element without 
        emitting a corresponding tag into the final output.  For these cases you can use the <nobr>vg-template</nobr> tag.
        You can put <code>vg-for</code> and <code>vg-if</code> attributes on it which have the usual 
        meaning but only its contents, not the tag itself, are included in the final output.  Example:
      </p>

<div vg-html='codefmt.Show("html",`<ul>
  <li>An item here</li>
  <li>Another item here</li>
  <vg-template vg-if="c.ShowExtra">
    <li>A conditional item here</li>
    <li>And another one</li>
    <li>And something else too</li>
  </vg-template>
</ul>
`)'></div>

      <h3 id="property-assignment">Property Assignment with <code>.</code></h3>

      <p>Completely separate from HTML attributes, HTML DOM elements have JavaScript properties associated with them.
        These can be assigned from a Go expression by using a property name that starts with a period.  Example:</p>

<div vg-html='codefmt.Show("html",`<div>
    <input type="checkbox" .checked="false"/>
</div>`)'></div>

      <p>Values are evaluated as a Go expression (<code>false</code> in this case) and then run through <code>json.Marshal</code> and the resulting value is assigned in JS.</p>

      <p>This can be useful for form or other elements that have JS properties which do not have an exact corresponding HTML attribute.</p>

      <h3 id="dom-events">DOM Events with <code>@</code></h3>

      <p>Event handlers can be attached to HTML elements (à la 
        <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">addEventListener</a>)
        using special attributes prefixed with an @ symbol.
      </p>

      <p>The attribute name after the @ indicates the event name, e.g. "click".  The attribute value may be a Go function/method 
        call or other valid Go statement.</p>
      
      <!--
      <p>Note that these values must hash properly with 
            <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#ComputeHash">ComputeHash()</a>,
            as this is needed by Vugu 
        to keep track of its events internally. Most primitive types that just store data are fine, but please, no channels.
      </p>
      -->

        <p>
        You may use variable names declared in earlier constructs (such as <code>key</code> or <code>value</code> from a for/range loop).
        Regular Go variable scoping rules apply, where each nested DOM element is equivalent to a Go <code>{</code> code block <code>}</code>.
        The special variable <code>event</code>, of type
        <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#DOMEvent">vugu.DOMEvent</a>
        is declared in this scope and available to access the context of the event.
        See <a href="/doc/dom-events">DOM Events</a> for more info.
        Example:
      </p>

<div vg-html='codefmt.Show("html",`<div>
    <div vg-if=&apos;c.Show&apos;>I am here!</div>
    <button @click=&apos;c.Toggle(event)&apos;>Toggle me Silly</button>
</div>

<script type="application/x-go">
import "log"
func (c *Root) Toggle(e vugu.DOMEvent) {
    c.Show = !c.Show
    log.Printf("Toggled! Show is now %t", c.Show)
}
type Root struct {
    Show bool `+"`"+`vugu:"data"`+"`"+`
}
</script>`)'></div>

      <p>You can also place statements directly in the event attribute value.  For example <code>@click=&apos;c.Show=!c.Show&apos;</code> is valid.</p>

      <h3 id="dom-element-access">DOM Element Access with <code id="vg-js-create">vg-js-create</code> and <code id="vg-js-populate">vg-js-populate</code></h3>

      <p>In some situations direct access to DOM elements via <code>js.Value</code> is needed.  Two callbacks are provided for this: <code>vg-js-create</code>
      is called when the DOM element is created but before any children are populated.  And <code>vg-js-populate</code> is called after 
      all child elements exist.  The DOM reference is passed in a variable named <code>value</code> and can then be used to handle the 
      DOM node directly.  Note that strictly speaking the value provided is only guaranteed to be valid until the next render pass starts.
      Depending on various factors, subsequent renders may or may not return the same value.  Example:</p>

<div vg-html='codefmt.Show("html",`<div>
  <canvas width="300" height="100"
    vg-js-populate="c.canvasPopulate(value)"
    ></canvas>
</div>

<script type="application/x-go">
type Root struct {}
func (c *Root) canvasPopulate(value js.Value) {
    drawCtx := value.Call("getContext", "2d")
    drawCtx.Set("font", "30px Arial")
    drawCtx.Call("strokeText", "Hello from Vugu!", 10, 50)
}
</script>`)'></div>

      <h3 id="special-variable-names">Special Variable Names</h3>

      <p>
        Several variable names have special meaning and are useful when writing .vugu files:
      </p>

      <ul>
        <li><code>c</code> - Refers to the instance of your Component.  
          It will be a 
          struct pointer.  This is the proper place to house the state of your component.
        By default the type of <code>c</code> is a named but empty struct.  However, it is common to create your own struct with 
        the data you need on it.  See more at <a href="/doc/components">Components</a></li>
        <li><code>event</code> - This is the variable name for a 
          <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#DOMEvent">vugu.DOMEvent</a> 
          instance that is 
          created when a DOM event is triggered and your handler is called.  This also provides 
          some other needed functionality such as the 
          <a target="_blank" href="https://godoc.org/github.com/vugu/vugu#EventEnv">EventEnv</a>, which is important for synchronizing 
          goroutines that need to update data after an event completes.  See more at 
          <a href="/doc/dom-events">DOM Events</a>.</li>
        <li><code>value</code> is used as the variable name in vg-js-create and vg-js-populate.  See above.</li>
        <li><code>key</code> and <code>value</code> - See section covering vg-for above.  These are the 
          default names used for implied range expressions.</li>

      </ul>
      
      <p>Please note that variables that your code declares, e.g. in a vg-for loop, should not start with <code>vg</code>, in order 
        to avoid conflicting with generated code.
      </p>

      <h3 id="naming-conventions">Tag and Attribute Naming Conventions</h3>

      <p>The following is a general list of rules which apply as regards the names of tags and attributes in Vugu markup:</p>

      <ul>
        <li><strong>Attributes (with no prefix character) are just strings.</strong>  Given <code>&lt;div id="blah"></code>, "blah" is just a string (no quotes included).</li>
        <li><strong>Attribute names preceded with a colon are Go expressions.</strong>  Given <code>&lt;div :id='"bl"+"ah"'>`</code>, <code>"bl"+"ah"</code> is a Go expression.</li>
        <li><strong>Attributes beginning with <code>vg-</code> contain Go code, according to their named purpose.</strong>  E.g. <code>vg-content</code> is used for an expression that converted and used as the contents of an element, <code>vg-for</code> contains the loop of a for statement, and <code>vg-if</code> contains the condition of an if statement.</li>
        <li><strong>Tags that start with <code>vg-</code> can have specialized attributes</strong> which are not prefixed (e.g. <code>&lt;vg-comp expr="....</code>)</li>
        <li><strong>Static component references contain a colon in the element name</strong> in the form of <code>pkg:Component</code>.  E.g. <code>&lt;somepkg:SomeComp></code> corresponds to a struct named <code>SomeComp</code> in a package imported as "somepkg".</li>
        <li><strong>Attribute names that start with an upper case letter correspond to Go struct field names.</strong>  It seems a happy coincidence that modern HTML documents almost always do (and always can) use lower case attribute names.  This leaves attribute names that start with an upper case letter to have the meaning of corresponding to a (exported) Go struct field name.  E.g. given <code>&lt;somepkg:SomeComp :FieldA="1" FieldB="blah"></code>, <code>FieldA</code> and <code>FieldB</code> are struct fields on <code>SomeComp</code>, but notice the colon and so these correspond to <code>someCompInst.FieldA = 1</code> and <code>someCompInst.FieldB = "blah"</code></li>
        <li><strong>Lower case attributes on components are dynamic</strong></li>
      </ul>
        
      <h3 id="full-html">Full-HTML Mode</h3>

      <p>
      Your root.vugu can now start with an <code>&lt;html></code> tag.</p>

      <p>This allows access to title and meta tags as well as style and JS script includes.</p>

      <p>Certain aspects of full-HTML mode are still under construction.  Please create an 
        <a target="_blank" href="https://github.com/vugu/vugu/issues">issue on GitHub</a> if you run into something missing that you need.</p>

      <p>A few rules that apply when using full-HTML mode:</p>

      <ul>
        <li><strong>Only the root component</strong> in the application can start with an &lt;html> tag.</li>
        <li><strong>Style and script tags</strong> have their sequence preserved but may be output at a different location on the page than where you put them.
        (This is for reasons having to do with how Vugu accumulates and renders style and script elements in various components and how it copes with the 
        disparity between full-HTML and regular components.)</li>
        <li><strong>The body tag must contain a single element</strong> and this is used as the main content of the component during rendering.  Attempting 
        to include multiple elements directly inside &lt;body> may lead to unspecified behavior and/or errors.</li>
      </ul>

</div>

<script type="application/x-go">

import "github.com/vugu/vugu-site/app/codefmt"

type Markup struct {}

func (c *Markup) Title() string { return "Vugu Files: Markup (HTML/Go)" }
func (c *Markup) ShortTitle() string { return "Markup (HTML/Go)" }
func (c *Markup) MetaDescription() string { return "The Markup section is an element which has the HTML that is displayed for this file. In addition to regular HTML, some specific attributes have special meaning in Vugu and allow you to introduce logic into your component's display." }

</script>
    